{"version":3,"sources":["index.js"],"names":["express","require","cors","app","googleTrends","axios","config","client","Twitter","env","TWITTER_CONSUMER_KEY","consumer_secret","process","TWITTER_CONSUMER_SECRET","use","TWITTER_ACCESS_TOKEN_KEY","access_token_secret","TWITTER_ACCESS_TOKEN_SECRET","access_token_key","id","res","send","tweet","tweet_mode","req","params","error","trends","response","get","WHOIS_API_KEY","domain","then","data","err","console","log","dailyTrends","geo","results","interestOverTime","keyword","word","relatedTopics","port","PORT","listen","concat"],"mappings":"aAQA,IAAAA,QAAAC,QAAA,WACMD,IAAOA,UAETE,KAAOD,QAAQ,QADbE,QAAMH,QAAZ,WAGMI,aAAeH,QAAQ,qBAEzBI,MAAQJ,QAAQ,SAEpBA,QAAQ,UAAUK,SAJlBH,IAAMC,IAAAA,QAQN,IAAMG,OAAS,IAAIC,QAAQ,CAJ3BP,aAAkBK,QAAlBG,IAAAC,qBAMIC,gBAAiBC,QAAQH,IAAII,wBAL7BC,iBAEJF,QAAAH,IAAAM,yBAKIC,oBAAqBJ,QAAQH,IAAIQ,8BADjCC,IAAAA,IAAAA,yBAA8BH,SAAAA,EAAAA,GAC9BC,OAAAA,IAAAA,gBAA6BP,CAARU,GAAYF,EAAAA,OAAAA,GAAAA,WAAAA,YAAAA,SAAAA,EAAAA,EAAAA,GAGrCG,EAAAC,KAAAC,OAEqDC,IAAAA,IAAAA,0BAAY,SAAAC,EAAAJ,GACzDA,OAAIC,IAAJD,eAAA,CAAAD,GAAAK,EAAAC,OAAAN,IAAA,SAAAO,EAAAC,EAAAC,GADJR,EAAAC,KAAAM,OAQ2BxB,IAA3B0B,IAAkD,qBAAyBD,SAAAA,EAAAA,GACvER,MAAIC,IAAJD,+DAAAA,OAAAR,QAAAH,IAAAqB,cAAAV,kCAAAA,OAAAI,EAAAC,OAAAM,SADJC,KAAA,SAAAJ,GAMJR,EAAAC,KAAAO,EAAAK,QALQb,MAMA,SAAAc,GAAA,OAAAC,QAAsBC,IAAAF,OAKZ/B,IAJd0B,IAAA,yBAAA,SAAAL,EAAAJ,GAQJhB,aAAAiC,YAAA,CAAAC,IAAAd,EAAAC,OAAAa,MAGSN,KAAK,SAAAO,GAFNnB,EAAAC,KAAAkB,KADR,MAEwCd,SAAOa,GACjCH,QAAAI,MAAAA,2BAAWL,OAMxB/B,IAED0B,IAAA,6BAAA,SAAAL,EAAAJ,GAEIhB,aAAaoC,iBAAiB,CAAEC,QAASjB,EAAIC,OAAOiB,OADhDV,KAAA,SAAAO,GACJnC,EAAaoC,KAAAA,KAAb,MACU,SAAAD,GACFJ,QAAAT,MAAA,2BAAAQ,OAQZ/B,IAAI0B,IAAI,4BAA6B,SAACL,EAAKJ,GAAvCS,aAAIc,cAAA,CAAAF,QAA6BjB,EAAAC,OAAML,OACvChB,KAAY,SAAAmC,GAAwBnB,EAAKC,KAACI,KAD1CI,MAGiBU,SAATL,GAFRC,QAIWT,MAAUQ,2BAAKA,OAM9B,IAAMU,KAAOhC,QAAQH,IAAIoC,MAAQ,IACjC1C,IAAI2C,OAAOF,KAAM,WAAA,OAAAT,QAAAC,IAAA,qBAAAW,OAAAH,KAAA","file":"index.min.js","sourcesContent":["/**\n * Summary. ExpressJS Endpoints\n * Description. Provides the endpoints for Newslytical backend\n * \n * @author James Bradford\n * @version 1.0\n */\n\n//Import Dependencies\nconst express = require('express');\nconst app = express();\nvar cors = require('cors');\nvar Twitter = require('twitter');\nconst googleTrends = require('google-trends-api');\n\nvar axios = require('axios');\n\nrequire('dotenv').config();\napp.use(cors());\n\n//Use the Twitter NPM package\nconst client = new Twitter({\n    consumer_key: process.env.TWITTER_CONSUMER_KEY,\n    consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n    access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET\n});\n\n// Get a Tweet by ID\napp.get('/api/twitter/tweet/:id', (req, res) => {\n    client.get(`statuses/show`, { id: req.params.id, tweet_mode: 'extended' }, function (error, tweet, response) {\n        res.send(tweet);\n    });\n})\n\n// Get a trends for a given location\napp.get('/api/twitter/trends/:id', (req, res) => {\n\n    client.get(`trends/place`, { id: req.params.id }, function (error, trends, response) {\n        res.send(trends);\n    });\n\n})\n\n// Perform a whois lookup on a given domain\napp.get('/api/whois/:domain', (req, res) => {\n    axios.get(`https://www.whoisxmlapi.com/whoisserver/WhoisService?apiKey=${process.env.WHOIS_API_KEY}&outputFormat=JSON&domainName=${req.params.domain}`)\n        .then(response => {\n            res.send(response.data);\n        })\n        .catch(err => console.log(err));\n})\n\n\n// Get the daily trends for a given country\napp.get('/api/trends/daily/:geo', (req, res) => {\n    googleTrends.dailyTrends({ geo: req.params.geo })\n        .then(results => {\n            res.send(results);\n        })\n        .catch(function (err) {\n            console.error('Oh no there was an error', err);\n        });\n})\n\n// Get the interest over time for a given word\napp.get('/api/trends/interest/:word', (req, res) => {\n    googleTrends.interestOverTime({ keyword: req.params.word })\n        .then(results => {\n            res.send(results);\n        })\n        .catch(function (err) {\n            console.error('Oh no there was an error', err);\n        });\n})\n\n// Get related topics for a given word\napp.get('/api/trends/related/:word', (req, res) => {\n    googleTrends.relatedTopics({ keyword: req.params.word })\n        .then(results => {\n            res.send(results);\n        })\n        .catch(function (err) {\n            console.error('Oh no there was an error', err);\n        });\n})\n\n//Start Server\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`Listening on port ${port}...`));\n"]}