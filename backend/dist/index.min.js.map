{"version":3,"sources":["index.js"],"names":["express","require","app","Twitter","cors","use","axios","consumer_key","process","env","TWITTER_CONSUMER_KEY","config","TWITTER_CONSUMER_SECRET","access_token_key","TWITTER_ACCESS_TOKEN_KEY","TWITTER_ACCESS_TOKEN_SECRET","consumer_secret","error","tweet","response","access_token_secret","id","req","res","client","get","params","trends","send","concat","WHOIS_API_KEY","domain","data","err","console","log","googleTrends","geo","then","results","dailyTrends","interestOverTime","keyword","word","relatedTopics","port","PORT","listen"],"mappings":"aACA,IAAMA,QAAUC,QAAQ,WADxBC,IAAAF,UACMA,KAAOC,QAAGA,QAGZE,QAAUF,QAAQ,WAFhBC,aAAND,QAAA,qBACIG,MAAOH,QAAQ,SACnBA,QAAIE,UAAUF,SAMdC,IAAIG,IAAID,QAHR,IAAIE,OAAQL,IAAOE,QAAA,CAOfI,aAAcC,QAAQC,IAAIC,qBAL9BT,gBAAkBU,QAAlBF,IAAAG,wBAOIC,iBAAkBL,QAAQC,IAAIK,yBAN9BT,oBAEJG,QAAAC,IAAAM,8BAGIC,IAAAA,IAAAA,yBAA6BJ,SAAAA,EAAAA,GAC7BC,OAAAA,IAAAA,gBAA8BC,CAAAA,GAAAA,EAAAA,OAAAA,GAAAA,WAHP,YAAA,SAAAG,EAAAC,EAAAC,GAIvBC,EAAAA,KAAAA,OAK8BC,IAAAA,IAAIC,0BAAN,SAAAA,EAAAC,GAA5BC,OAA2EC,IAA3E,eAAmGN,CAAAA,GAAxBG,EAAkCI,OAAAL,IAAA,SAAAJ,EAAAU,EAAAR,GACrGS,EAAJA,KAASV,OAOgBG,IAAAA,IAAIC,qBAAWD,SAAAA,EAAAA,GAA5Cf,MAAkDmB,IAAlD,+DAAAI,OAAqFrB,QAAAC,IAAAqB,cAArF,kCAAAD,OAAqFP,EAAAI,OAAAK,SAC7EH,KAAKD,SAAAA,GADbJ,EAAAK,KAAAT,EAAAa,QAAA,MAYW,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OADzB/B,IAHLuB,IAAA,yBAIc,SAAAH,EAAAC,GAAAa,aAAIF,YAAJ,CAAAG,IAAAf,EAAAI,OAAAW,MAJdC,KAAA,SAAAC,GAOJhB,EAAAK,KAAAW,KAHkB,MAIV,SAAAN,GACJG,QAAaI,MAAb,2BAAyBP,OAKjBC,IAAAA,IAAAA,6BAAc,SAAAZ,EAAdC,GALRa,aAAAK,iBAAA,CAAAC,QAAApB,EAAAI,OAAAiB,OASJL,KAAA,SAAAC,GAIYhB,EAAIK,KAAKW,KAbjB,MAWaE,SAAAA,GAAyBP,QAAMR,MAAOiB,2BAAAA,OAM9CzC,IANLuB,IAAA,4BAAA,SAAAH,EAAAC,GASJa,aAAAQ,cAAA,CAAAF,QAAApB,EAAAI,OAAAiB,OAGSL,KAAK,SAAAC,GAFNhB,EAAAK,KAAAW,KADR,MAEyCjB,SAAWqB,GACtCT,QAAAK,MAAAA,2BAAWN,OAMxB,IAEDY,KAAArC,QAAAC,IAAAqC,MAAA,IAEA5C,IAAI6C,OAAOF,KAAM,WAAA,OAAMX,QAAQC,IAAR,qBAAAN,OAAiCgB,KAAjC","file":"index.min.js","sourcesContent":["//Import Dependencies\nconst express = require('express');\nconst app = express();\nvar cors = require('cors');\nvar Twitter = require('twitter');\nconst googleTrends = require('google-trends-api');\n\nvar axios = require('axios');\n\nrequire('dotenv').config();\napp.use(cors());\n\n//Use the Twitter NPM package\nconst client = new Twitter({\n    consumer_key: process.env.TWITTER_CONSUMER_KEY,\n    consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n    access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET\n});\n\n// Get a Tweet by ID\napp.get('/api/twitter/tweet/:id', (req, res) => {\n    client.get(`statuses/show`, { id: req.params.id, tweet_mode: 'extended' }, function (error, tweet, response) {\n        res.send(tweet);\n    });\n})\n\n// Get a trends for a given location\napp.get('/api/twitter/trends/:id', (req, res) => {\n\n    client.get(`trends/place`, { id: req.params.id }, function (error, trends, response) {\n        res.send(trends);\n    });\n\n})\n\n// Perform a whois lookup on a given domain\napp.get('/api/whois/:domain', (req, res) => {\n    axios.get(`https://www.whoisxmlapi.com/whoisserver/WhoisService?apiKey=${process.env.WHOIS_API_KEY}&outputFormat=JSON&domainName=${req.params.domain}`)\n        .then(response => {\n            res.send(response.data);\n        })\n        .catch(err => console.log(err));\n})\n\n// Get the daily trends for a given country\napp.get('/api/trends/daily/:geo', (req, res) => {\n    googleTrends.dailyTrends({geo: req.params.geo})\n        .then(results => {\n            res.send(results);\n        })\n        .catch(function (err) {\n            console.error('Oh no there was an error', err);\n        });\n})\n\n// Get the interest over time for a given word\napp.get('/api/trends/interest/:word', (req, res) => {\n    googleTrends.interestOverTime({keyword: req.params.word})\n        .then(results => {\n            res.send(results);\n        })\n        .catch(function (err) {\n            console.error('Oh no there was an error', err);\n        });\n})\n\n// Get related topics for a given word\napp.get('/api/trends/related/:word', (req, res) => {\n    googleTrends.relatedTopics({keyword: req.params.word})\n        .then(results => {\n            res.send(results);\n        })\n        .catch(function (err) {\n            console.error('Oh no there was an error', err);\n        });\n})\n\n//Start Server\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`Listening on port ${port}...`));\n"]}