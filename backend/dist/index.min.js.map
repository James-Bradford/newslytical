{"version":3,"sources":["index.js"],"names":["express","require","cors","app","kahaki","Twitter","use","axios","consumer_key","process","env","TWITTER_CONSUMER_KEY","config","TWITTER_CONSUMER_SECRET","access_token_key","TWITTER_ACCESS_TOKEN_KEY","TWITTER_ACCESS_TOKEN_SECRET","consumer_secret","error","tweet","response","access_token_secret","id","req","res","tweet_mode","WHOIS_API_KEY","params","domain","then","data","err","console","log","send","googleTrends","relatedTopics","keyword","word","results","get","getPreview","query","url","subObject","result","port","PORT","listen","concat"],"mappings":"aAQA,IAAAA,QAAAC,QAAA,WACMD,IAAOA,UAETE,KAAOD,QAAQ,QADbE,QAAMH,QAAZ,WAGII,OAASH,QAAQ,UAFjBC,aAAeD,QAAnB,qBACII,MAAOJ,QAAGA,SACdA,QAAIG,UAASH,SAMbE,IAAIG,IAAIJ,QAHR,IAAIK,OAAQN,IAAOI,QAAA,CAOfG,aAAcC,QAAQC,IAAIC,qBAL9BV,gBAAkBW,QAAlBF,IAAAG,wBAOIC,iBAAkBL,QAAQC,IAAIK,yBAN9BT,oBAEJG,QAAAC,IAAAM,8BAGIC,IAAAA,IAAAA,yBAA6BJ,SAAAA,EAAAA,GAC7BC,OAAAA,IAAAA,gBAA8BC,CAAAA,GAAAA,EAAAA,OAAAA,GAAAA,WAHP,YAAA,SAAAG,EAAAC,EAAAC,GAIvBC,EAAAA,KAAAA,OAK8BC,IAAAA,IAAIC,qBAAN,SAAAA,EAAAC,GAAqBC,MAAAA,IAAAA,+DAAAA,OAAYhB,QAAAC,IAAAgB,cAAZD,kCAAAA,OAAYF,EAAAI,OAAAC,SAAcC,KAAA,SAAAT,GACvEI,EAASL,KAATC,EAAAU,QAD6CL,MAKrD,SAAAM,GAAA,OAAAC,QAAAC,IAAAF,OAIYP,IAAAA,IAAIU,4BAAJ,SAAAX,EAAAC,GAFRW,aAIWC,cAAG,CAAAC,QAAAd,EAAAI,OAAAW,OAAAT,KAAIG,SAAAA,GAJlBR,EAAAU,KAAAK,KAAA,MAaW,SAAUR,GALjBC,QAAAd,MAAA,2BAAmCM,OAIlCrB,IAHLqC,IAAA,iBAIqBT,SAAVR,EAAeC,GAClBQ,IAAAA,EAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MALR5B,OAAAqC,WAAAlB,EAAAmB,MAAAC,IAAA,CAAAC,WAAA,KAKQZ,KAAAA,EALRa,EAKQb,EAAAA,KAIZR,EAAAU,KAAAW,GAJYb,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,YAMP,IAAAc,KAAArC,QAAAC,IAAAqC,MAAA,IAAA5C,IAAA6C,OAAAF,KAAA,WAAA,OAAAd,QAAAC,IAAA,qBAAAgB,OAAAH,KAAA","file":"index.min.js","sourcesContent":["/**\n * Summary. ExpressJS Endpoints\n * Description. Provides the endpoints for Newslytical backend\n * \n * @author James Bradford\n * @version 1.0\n */\n\n//Import Dependencies\nconst express = require('express');\nconst app = express();\nvar cors = require('cors');\nvar Twitter = require('twitter');\nvar kahaki = require('kahaki');\nconst googleTrends = require('google-trends-api');\n\nvar axios = require('axios');\n\nrequire('dotenv').config();\napp.use(cors());\n\n//Use the Twitter NPM package\nconst client = new Twitter({\n    consumer_key: process.env.TWITTER_CONSUMER_KEY,\n    consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n    access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET\n});\n\n// Get a Tweet by ID\napp.get('/api/twitter/tweet/:id', (req, res) => {\n    client.get(`statuses/show`, { id: req.params.id, tweet_mode: 'extended' }, function (error, tweet, response) {\n        res.send(tweet);\n    });\n})\n\n// Perform a whois lookup on a given domain\napp.get('/api/whois/:domain', (req, res) => {\n    axios.get(`https://www.whoisxmlapi.com/whoisserver/WhoisService?apiKey=${process.env.WHOIS_API_KEY}&outputFormat=JSON&domainName=${req.params.domain}`)\n        .then(response => {\n            res.send(response.data);\n        })\n        .catch(err => console.log(err));\n})\n\n// Get related topics for a given word\napp.get('/api/trends/related/:word', (req, res) => {\n    googleTrends.relatedTopics({ keyword: req.params.word })\n        .then(results => {\n            res.send(results);\n        })\n        .catch(function (err) {\n            console.error('Oh no there was an error', err);\n        });\n})\n\n// Get url metadata for a given url\napp.get('/api/metadata/', (req, res) => {\n    (async () => {\n        const result = await kahaki.getPreview(req.query.url,{ subObject: true });\n    res.send(result);\n})();\n})\n\n//Start Server\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`Listening on port ${port}...`));\n"]}