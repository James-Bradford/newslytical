{"version":3,"sources":["index.js"],"names":["express","require","app","cors","Twitter","kahaki","googleTrends","axios","config","use","client","consumer_key","process","env","TWITTER_CONSUMER_KEY","consumer_secret","TWITTER_CONSUMER_SECRET","access_token_key","TWITTER_ACCESS_TOKEN_KEY","access_token_secret","TWITTER_ACCESS_TOKEN_SECRET","get","req","res","id","params","tweet_mode","error","tweet","response","send","WHOIS_API_KEY","domain","then","data","err","console","log","relatedTopics","keyword","word","results","getPreview","query","url","subObject","result","port","PORT","listen"],"mappings":"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","sourcesContent":["/**\n * Summary. ExpressJS Endpoints\n * Description. Provides the endpoints for Newslytical backend\n * \n * @author James Bradford\n * @version 1.0\n */\n\n//Import Dependencies\nconst express = require('express');\nconst app = express();\nvar cors = require('cors');\nvar Twitter = require('twitter');\nvar kahaki = require('kahaki');\nconst googleTrends = require('google-trends-api');\n\nvar axios = require('axios');\n\nrequire('dotenv').config();\napp.use(cors());\n\n//Use the Twitter NPM package\nconst client = new Twitter({\n    consumer_key: process.env.TWITTER_CONSUMER_KEY,\n    consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n    access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET\n});\n\n// Get a Tweet by ID\napp.get('/api/twitter/tweet/:id', (req, res) => {\n    client.get(`statuses/show`, { id: req.params.id, tweet_mode: 'extended' }, function (error, tweet, response) {\n        res.send(tweet);\n    });\n})\n\n// Perform a whois lookup on a given domain\napp.get('/api/whois/:domain', (req, res) => {\n    axios.get(`https://www.whoisxmlapi.com/whoisserver/WhoisService?apiKey=${process.env.WHOIS_API_KEY}&outputFormat=JSON&domainName=${req.params.domain}`)\n        .then(response => {\n            res.send(response.data);\n        })\n        .catch(err => console.log(err));\n})\n\n// Get related topics for a given word\napp.get('/api/trends/related/:word', (req, res) => {\n    googleTrends.relatedTopics({ keyword: req.params.word })\n        .then(results => {\n            res.send(results);\n        })\n        .catch(function (err) {\n            console.error('Oh no there was an error', err);\n        });\n})\n\n// Get url metadata for a given url\napp.get('/api/metadata/', (req, res) => {\n    (async () => {\n        const result = await kahaki.getPreview(req.query.url,{ subObject: true });\n    res.send(result);\n})();\n})\n\n//Start Server\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`Listening on port ${port}...`));\n"],"file":"index.dev.js"}