{"version":3,"sources":["store.js"],"names":["Vue","use","Vuex","store","Store","state","rawTweet","tweet","twitterTrendsUS","twitterTrendsUK","whois","tab","Number","mutations","SAVE_RAW_TWEET","SAVE_TWEET","SAVE_TWITTER_TRENDS_US","SAVE_TWITTER_TRENDS_UK","SAVE_WHOIS","SAVE_TAB","actions","loadRawTweet","id","commit","self","Api","get","then","result","data","error","Error","loadTweet","urls","entities","hashtags","i","full_text","replace","url","expanded_url","text","length","hostname","indexOf","split","psl","push","loadTwitterTrendsUK","loadTwitterTrendsUS","setTab"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport Api from '../services/Api'\nimport psl from \"psl\";\n\nVue.use(Vuex)\n\nexport const store = new Vuex.Store({\n    state: {\n        rawTweet: {},\n        tweet: {},\n        twitterTrendsUS: [],\n        twitterTrendsUK: [],\n        whois: null,\n        tab: Number\n    },\n    mutations: {\n        SAVE_RAW_TWEET(state, rawTweet) {\n            state.rawTweet = rawTweet;\n        },\n        SAVE_TWEET(state, tweet) {\n            state.tweet = tweet;\n        },\n        SAVE_TWITTER_TRENDS_US(state, twitterTrendsUS) {\n            state.twitterTrendsUS = twitterTrendsUS;\n        },\n        SAVE_TWITTER_TRENDS_UK(state, twitterTrendsUK) {\n            state.twitterTrendsUK = twitterTrendsUK;\n        },\n        SAVE_WHOIS(state, whois) {\n            state.whois = whois;\n        },\n        SAVE_TAB(state, tab) {\n            state.tab = tab;\n        }\n    },\n    actions: {\n        /**\n        * Call API to load Tweet and highlight\n        * @param {*} param0 \n        * @param {*} id \n        */\n        loadRawTweet({ commit }, id) {\n            var self = this;\n\n            //Make API call\n            Api.get(`twitter/tweet/${id}`)\n                .then(function (result) {\n\n                    self.commit('SAVE_RAW_TWEET', result.data)\n\n                    //Throw error if needed\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        /**\n         * Call API to load Tweet and highlight\n         * @param {*} param0 \n         * @param {*} id \n         */\n        loadTweet({ commit, state }, id) {\n            var self = this;\n            var tweet = {};\n            var urls = [];\n            var whois = [];\n\n            //Make API call\n            Api.get(`twitter/tweet/${id}`)\n                .then(function (result) {\n                    //Set variables\n                    tweet = result.data;\n                    urls = tweet.entities.urls;\n                    const hashtags = tweet.entities.hashtags;\n\n                    //For each URL, replace it with highlighted version\n                    for (let i in urls) {\n                        tweet.full_text = tweet.full_text.replace(urls[i].url, `<span class=\"highlightURL\">${urls[i].expanded_url}</span>`);\n                    }\n\n                    //For each hashtag, replace it with highlighted version\n                    for (let i in hashtags) {\n                        tweet.full_text = tweet.full_text.replace(\"#\" + hashtags[i].text, `<span class=\"highlightHashtag\">#${hashtags[i].text}</span>`)\n                    }\n\n                    //Assign modified tweet to state\n                    self.commit('SAVE_TWEET', tweet)\n\n                    //Throw error if needed\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n\n            //Performs whois on each hostname in Tweet\n            for (let i = 0; i < urls.length; i++) {\n\n                var hostname;\n                //find & remove protocol (http, ftp, etc.) and get hostname\n\n                if (url.indexOf(\"//\") > -1) {\n                    hostname = url.split(\"/\")[2];\n                } else {\n                    hostname = url.split(\"/\")[0];\n                }\n\n                //find & remove port number\n                hostname = hostname.split(\":\")[0];\n                //find & remove \"?\"\n                hostname = hostname.split(\"?\")[0];\n\n                //Extract hostname\n                var url = psl.get(hostname);\n\n                //Make API call\n                Api.get(`whois/${url}`)\n                    .then(function (result) {\n\n                        //Add result to array\n                        whois.push(result.data);\n                    })\n                    .catch(error => {\n                        throw new Error(\"API ERROR\");\n                    });\n                }\n\n                //Assign local variable\n                this.commit('SAVE_WHOIS', whois);\n            },\n            loadTwitterTrendsUK() {\n                var self = this;\n\n                Api.get(`twitter/trends/44418`)\n                    .then(function (result) {\n                        self.commit('SAVE_TWITTER_TRENDS_UK', result.data);\n                    }).catch(error => {\n                        throw new Error(\"API ERROR\");\n                    });\n            },\n            loadTwitterTrendsUS() {\n                var self = this;\n\n                Api.get(`twitter/trends/2459115`)\n                    .then(function (result) {\n                        self.commit('SAVE_TWITTER_TRENDS_US', result.data);\n                    }).catch(error => {\n                        throw new Error(\"API ERROR\");\n                    });\n            },\n            setTab({ commit }, tab) {\n                this.commit('SAVE_TAB', tab);\n            }\n        }\n    });"],"file":"store.dev.js"}