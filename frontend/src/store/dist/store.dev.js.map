{"version":3,"sources":["store.js"],"names":["Vue","use","Vuex","store","Store","state","rawTweet","tweet","twitterTrendsUS","twitterTrendsUK","whois","isLoading","tab","Number","mutations","SAVE_RAW_TWEET","SAVE_TWEET","SAVE_TWITTER_TRENDS_US","SAVE_TWITTER_TRENDS_UK","SAVE_WHOIS","TOGGLE_IS_LOADING","SAVE_TAB","actions","loadRawTweet","id","commit","Api","get","then","result","data","error","Error","loadTweet","dispatch","loadWhois","urls","entities","i","length","url","expanded_url","indexOf","hostname","split","extractedUrl","psl","push","loadTwitterTrendsUK","self","loadTwitterTrendsUS","setTab"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport Api from '../services/Api'\nimport psl from \"psl\";\n\nVue.use(Vuex)\n\nexport const store = new Vuex.Store({\n    state: {\n        rawTweet: {},\n        tweet: {},\n        twitterTrendsUS: [],\n        twitterTrendsUK: [],\n        whois: null,\n        isLoading: false,\n        tab: Number\n    },\n    mutations: {\n        SAVE_RAW_TWEET(state, rawTweet) {\n            state.rawTweet = rawTweet;\n        },\n        SAVE_TWEET(state, tweet) {\n            state.tweet = tweet;\n        },\n        SAVE_TWITTER_TRENDS_US(state, twitterTrendsUS) {\n            state.twitterTrendsUS = twitterTrendsUS;\n        },\n        SAVE_TWITTER_TRENDS_UK(state, twitterTrendsUK) {\n            state.twitterTrendsUK = twitterTrendsUK;\n        },\n        SAVE_WHOIS(state, whois) {\n            state.whois = whois;\n        },\n        TOGGLE_IS_LOADING(state) {\n            state.isLoading = !state.isLoading;\n        },\n        SAVE_TAB(state, tab) {\n            state.tab = tab;\n        }\n    },\n    actions: {\n        /**\n        * Call API to load Tweet and highlight\n        * @param {*} param0 \n        * @param {*} id \n        */\n        loadRawTweet({ commit }, id) {\n\n            //Make API call\n            Api.get(`twitter/tweet/${id}`)\n                .then(function (result) {\n\n                    commit('SAVE_RAW_TWEET', result.data)\n\n                    //Throw error if needed\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        /**\n         * Call API to load Tweet and highlight\n         * @param {*} param0 \n         * @param {*} id \n         */\n        async loadTweet({ commit, dispatch }, id) {\n\n            //Assign modified tweet to state\n            await Api.get(`twitter/tweet/${id}`)\n                .then(function (result) {\n                    commit('SAVE_TWEET', result.data);\n                    //Throw error if needed\n                }).then(function () {\n                    dispatch('loadWhois');\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n\n\n        },\n        async loadWhois({ commit, state }) {\n\n\n            var urls = state.tweet.entities.urls;\n            var whois = [];\n\n            //Performs whois on each hostname in Tweet\n            for (let i = 0; i < urls.length; i++) {\n\n                var url = urls[i].expanded_url;\n                var hostname;\n                //find & remove protocol (http, ftp, etc.) and get hostname\n\n                if (url.indexOf(\"//\") > -1) {\n                    hostname = url.split(\"/\")[2];\n                } else {\n                    hostname = url.split(\"/\")[0];\n                }\n\n                //find & remove port number\n                hostname = hostname.split(\":\")[0];\n                //find & remove \"?\"\n                hostname = hostname.split(\"?\")[0];\n\n                //Extract hostname\n                var extractedUrl = psl.get(hostname);\n\n                //Make API call\n                await Api.get(`whois/${extractedUrl}`)\n                    .then(function (result) {\n\n                        //Add result to array\n                        whois.push(result.data);\n                    })\n                    .catch(error => {\n                        throw new Error(\"API ERROR\");\n                    });\n            }\n\n            //Assign local variable\n            commit('SAVE_WHOIS', whois);\n        },\n        loadTwitterTrendsUK() {\n            var self = this;\n\n            Api.get(`twitter/trends/44418`)\n                .then(function (result) {\n                    self.commit('SAVE_TWITTER_TRENDS_UK', result.data);\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        loadTwitterTrendsUS() {\n            var self = this;\n\n            Api.get(`twitter/trends/2459115`)\n                .then(function (result) {\n                    self.commit('SAVE_TWITTER_TRENDS_US', result.data);\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        setTab({ commit }, tab) {\n            this.commit('SAVE_TAB', tab);\n        }\n    }\n});"],"file":"store.dev.js"}