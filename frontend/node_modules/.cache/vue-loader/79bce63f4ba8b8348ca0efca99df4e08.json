{"remainingRequest":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/components/LinkWhois.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/components/LinkWhois.vue","mtime":1594460583260},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCBBcGkgZnJvbSAiLi4vc2VydmljZXMvQXBpIjsKdmFyIHBzbCA9IHJlcXVpcmUoInBzbCIpOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJMaW5rV2hvaXMiLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBwYW5lbDogWzBdCiAgICB9CiAgfSwKICBwcm9wczogewogICAgdXJsczogW10sCiAgICB3aG9pczogW10KICB9LAogIGNvbXB1dGVkOiB7CiAgICB0d2VldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnR3ZWV0OwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZXh0cmFjdEhvc3RuYW1lKHVybCkgewogICAgICB2YXIgaG9zdG5hbWU7CiAgICAgIC8vZmluZCAmIHJlbW92ZSBwcm90b2NvbCAoaHR0cCwgZnRwLCBldGMuKSBhbmQgZ2V0IGhvc3RuYW1lCgogICAgICBpZiAodXJsLmluZGV4T2YoIi8vIikgPiAtMSkgewogICAgICAgIGhvc3RuYW1lID0gdXJsLnNwbGl0KCIvIilbMl07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaG9zdG5hbWUgPSB1cmwuc3BsaXQoIi8iKVswXTsKICAgICAgfQoKICAgICAgLy9maW5kICYgcmVtb3ZlIHBvcnQgbnVtYmVyCiAgICAgIGhvc3RuYW1lID0gaG9zdG5hbWUuc3BsaXQoIjoiKVswXTsKICAgICAgLy9maW5kICYgcmVtb3ZlICI/IgogICAgICBob3N0bmFtZSA9IGhvc3RuYW1lLnNwbGl0KCI/IilbMF07CgogICAgICByZXR1cm4gaG9zdG5hbWU7CiAgICB9LAogICAgaXNIVFRQUyh1cmwpIHsKICAgICAgaWYgKHVybC5tYXRjaCgvXlteOl0rLykgPT0gImh0dHBzIikgewogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0gZWxzZSB7IHJldHVybiBmYWxzZSB9CiAgICB9CiAgfSwKCiAgY3JlYXRlZCgpIHsKICAgIHZhciB1cmxzID0gdGhpcy50d2VldC5lbnRpdGllcy51cmxzOwogICAgdmFyIHdob2lzID0gW107CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgdXJsOwoKICAgIC8vUGVyZm9ybXMgd2hvaXMgb24gZWFjaCBob3N0bmFtZSBpbiBUd2VldAogICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1cmxzLmxlbmd0aDsgaSsrKSB7CgogICAgICAvL0V4dHJhY3QgaG9zdG5hbWUKICAgICAgdXJsID0gcHNsLmdldCh0aGlzLmV4dHJhY3RIb3N0bmFtZSh1cmxzW2ldLmV4cGFuZGVkX3VybCkpOwoKICAgICAgLy9NYWtlIEFQSSBjYWxsCiAgICAgIEFwaS5nZXQoYHdob2lzLyR7dXJsfWApCiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7CgogICAgICAgICAgLy9BZGQgcmVzdWx0IHRvIGFycmF5CiAgICAgICAgICB3aG9pcy5wdXNoKHJlc3VsdC5kYXRhKTsKICAgICAgICB9KQogICAgICAgIC5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFQSSBFUlJPUiIpOwogICAgICAgIH0pOwoKICAgICAgLy9Bc3NpZ24gbG9jYWwgdmFyaWFibGUKICAgICAgdGhpcy53aG9pcyA9IHdob2lzOwogICAgfQogICAgY29uc29sZS5sb2codGhpcy53aG9pcyk7CiAgfQp9Owo="},{"version":3,"sources":["LinkWhois.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"LinkWhois.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"pug\">\n    v-card.pa-2.elevation-4(color=\"warning\")\n      v-card-title.pa-2.white--text.text-h4\n        v-icon.mdi.mdi-link(color='white' x-large)\n        | Whois Data\n      v-card-text\n        v-divider.ma-2(color=\"white\")\n      v-expansion-panels(v-model=\"this.panel\" v-if=\"this.tweet.entities.urls.length > 0\")\n        v-expansion-panel(v-for='(url, u) in this.tweet.entities.urls')\n          v-expansion-panel-header {{ whois[u].WhoisRecord.domainName }}\n          v-expansion-panel-content \n              div(v-if='isHTTPS(url.expanded_url)') \n                v-icon.mdi.mdi-lock-check(color=\"success\")\n                | This website uses HTTPS encryption\n              div(v-else) \n                v-icon.mdi.mdi-lock-open-alert(color=\"warning\")\n                | This website does not use HTTPS encryption\n              div(v-if='whois[u].WhoisRecord.registrant !== undefined') \n                v-icon.mdi.mdi-earth\n                | Registered in: {{ whois[u].WhoisRecord.registrant.country }}\n                br\n                v-icon.mdi.mdi-account\n                | Registrant: {{ whois[u].WhoisRecord.registrant.organization }}\n              div(v-else)\n                v-icon.mdi.mdi-earth-off\n                | No location found for this domain\n                br\n                v-icon.mdi.mdi-account-off\n                | No registrant information for this domain\n              div(v-if='whois[u].WhoisRecord.registryData.createdDate !== undefined')\n                v-icon.mdi.mdi-clock\n                | Created: {{ whois[u].WhoisRecord.registryData.createdDate }}\n      div.pa-2.white--text.text-justify(v-else) We haven't detected any links in this Tweet.  If we've got it wrong and there are links, please think carefully before clicking them and use your own discretion.\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Api from \"../services/Api\";\nvar psl = require(\"psl\");\n\nexport default {\n  name: \"LinkWhois\",\n  data() {\n    return {\n      panel: [0]\n    }\n  },\n  props: {\n    urls: [],\n    whois: []\n  },\n  computed: {\n    tweet() {\n      return this.$store.state.tweet;\n    }\n  },\n  methods: {\n    extractHostname(url) {\n      var hostname;\n      //find & remove protocol (http, ftp, etc.) and get hostname\n\n      if (url.indexOf(\"//\") > -1) {\n        hostname = url.split(\"/\")[2];\n      } else {\n        hostname = url.split(\"/\")[0];\n      }\n\n      //find & remove port number\n      hostname = hostname.split(\":\")[0];\n      //find & remove \"?\"\n      hostname = hostname.split(\"?\")[0];\n\n      return hostname;\n    },\n    isHTTPS(url) {\n      if (url.match(/^[^:]+/) == \"https\") {\n        return true\n      } else { return false }\n    }\n  },\n\n  created() {\n    var urls = this.tweet.entities.urls;\n    var whois = [];\n    var self = this;\n    var url;\n\n    //Performs whois on each hostname in Tweet\n    for (let i = 0; i < urls.length; i++) {\n\n      //Extract hostname\n      url = psl.get(this.extractHostname(urls[i].expanded_url));\n\n      //Make API call\n      Api.get(`whois/${url}`)\n        .then(function(result) {\n\n          //Add result to array\n          whois.push(result.data);\n        })\n        .catch(error => {\n          throw new Error(\"API ERROR\");\n        });\n\n      //Assign local variable\n      this.whois = whois;\n    }\n    console.log(this.whois);\n  }\n};\n</script>\n\n<style>\n</style>"]}]}