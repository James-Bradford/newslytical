{"remainingRequest":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/babel-loader/lib/index.js!/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/vuetify/lib/services/theme/index.js","dependencies":[{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/vuetify/lib/services/theme/index.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}