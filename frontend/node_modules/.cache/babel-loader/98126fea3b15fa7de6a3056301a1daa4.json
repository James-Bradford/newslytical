{"remainingRequest":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/babel-loader/lib/index.js!/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js","dependencies":[{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js","mtime":1595841058742},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgVnVleCBmcm9tICd2dWV4JzsKaW1wb3J0IEFwaSBmcm9tICcuLi9zZXJ2aWNlcy9BcGknOwppbXBvcnQgcHNsIGZyb20gInBzbCI7ClZ1ZS51c2UoVnVleCk7CmV4cG9ydCBjb25zdCBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHsKICBzdGF0ZTogewogICAgcmF3VHdlZXQ6IHt9LAogICAgdHdlZXQ6IHt9LAogICAgdHdpdHRlclRyZW5kc1VTOiBbXSwKICAgIHR3aXR0ZXJUcmVuZHNVSzogW10sCiAgICB3aG9pczogbnVsbCwKICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICB0YWI6IDAKICB9LAogIG11dGF0aW9uczogewogICAgU0FWRV9SQVdfVFdFRVQoc3RhdGUsIHJhd1R3ZWV0KSB7CiAgICAgIHN0YXRlLnJhd1R3ZWV0ID0gcmF3VHdlZXQ7CiAgICB9LAoKICAgIFNBVkVfVFdFRVQoc3RhdGUsIHR3ZWV0KSB7CiAgICAgIHN0YXRlLnR3ZWV0ID0gdHdlZXQ7CiAgICB9LAoKICAgIFNBVkVfVFdJVFRFUl9UUkVORFNfVVMoc3RhdGUsIHR3aXR0ZXJUcmVuZHNVUykgewogICAgICBzdGF0ZS50d2l0dGVyVHJlbmRzVVMgPSB0d2l0dGVyVHJlbmRzVVM7CiAgICB9LAoKICAgIFNBVkVfVFdJVFRFUl9UUkVORFNfVUsoc3RhdGUsIHR3aXR0ZXJUcmVuZHNVSykgewogICAgICBzdGF0ZS50d2l0dGVyVHJlbmRzVUsgPSB0d2l0dGVyVHJlbmRzVUs7CiAgICB9LAoKICAgIFNBVkVfV0hPSVMoc3RhdGUsIHdob2lzKSB7CiAgICAgIHN0YXRlLndob2lzID0gd2hvaXM7CiAgICB9LAoKICAgIFRPR0dMRV9JU19MT0FESU5HKHN0YXRlKSB7CiAgICAgIHN0YXRlLmlzTG9hZGluZyA9ICFzdGF0ZS5pc0xvYWRpbmc7CiAgICB9LAoKICAgIFNBVkVfVEFCKHN0YXRlLCB0YWIpIHsKICAgICAgc3RhdGUudGFiID0gdGFiOwogICAgfQoKICB9LAogIGFjdGlvbnM6IHsKICAgIC8qKgogICAgKiBDYWxsIEFQSSB0byBsb2FkIFR3ZWV0IGFuZCBoaWdobGlnaHQKICAgICogQHBhcmFtIHsqfSBwYXJhbTAgCiAgICAqIEBwYXJhbSB7Kn0gaWQgCiAgICAqLwogICAgbG9hZFJhd1R3ZWV0KHsKICAgICAgY29tbWl0CiAgICB9LCBpZCkgewogICAgICAvL01ha2UgQVBJIGNhbGwKICAgICAgQXBpLmdldChgdHdpdHRlci90d2VldC8ke2lkfWApLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIGNvbW1pdCgnU0FWRV9SQVdfVFdFRVQnLCByZXN1bHQuZGF0YSk7IC8vVGhyb3cgZXJyb3IgaWYgbmVlZGVkCiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFQSSBFUlJPUiIpOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBDYWxsIEFQSSB0byBsb2FkIFR3ZWV0IGFuZCBoaWdobGlnaHQKICAgICAqIEBwYXJhbSB7Kn0gcGFyYW0wIAogICAgICogQHBhcmFtIHsqfSBpZCAKICAgICAqLwogICAgYXN5bmMgbG9hZFR3ZWV0KHsKICAgICAgY29tbWl0LAogICAgICBkaXNwYXRjaAogICAgfSwgaWQpIHsKICAgICAgLy9Bc3NpZ24gbW9kaWZpZWQgdHdlZXQgdG8gc3RhdGUKICAgICAgYXdhaXQgQXBpLmdldChgdHdpdHRlci90d2VldC8ke2lkfWApLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIGNvbW1pdCgnU0FWRV9UV0VFVCcsIHJlc3VsdC5kYXRhKTsgLy9UaHJvdyBlcnJvciBpZiBuZWVkZWQKICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgZGlzcGF0Y2goJ2xvYWRXaG9pcycpOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJBUEkgRVJST1IiKTsKICAgICAgfSk7CiAgICB9LAoKICAgIGFzeW5jIGxvYWRXaG9pcyh7CiAgICAgIGNvbW1pdCwKICAgICAgc3RhdGUKICAgIH0pIHsKICAgICAgdmFyIHVybHMgPSBzdGF0ZS50d2VldC5lbnRpdGllcy51cmxzOwogICAgICB2YXIgd2hvaXMgPSBbXTsgLy9QZXJmb3JtcyB3aG9pcyBvbiBlYWNoIGhvc3RuYW1lIGluIFR3ZWV0CgogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgdXJsID0gdXJsc1tpXS5leHBhbmRlZF91cmw7CiAgICAgICAgdmFyIGhvc3RuYW1lOyAvL2ZpbmQgJiByZW1vdmUgcHJvdG9jb2wgKGh0dHAsIGZ0cCwgZXRjLikgYW5kIGdldCBob3N0bmFtZQoKICAgICAgICBpZiAodXJsLmluZGV4T2YoIi8vIikgPiAtMSkgewogICAgICAgICAgaG9zdG5hbWUgPSB1cmwuc3BsaXQoIi8iKVsyXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaG9zdG5hbWUgPSB1cmwuc3BsaXQoIi8iKVswXTsKICAgICAgICB9IC8vZmluZCAmIHJlbW92ZSBwb3J0IG51bWJlcgoKCiAgICAgICAgaG9zdG5hbWUgPSBob3N0bmFtZS5zcGxpdCgiOiIpWzBdOyAvL2ZpbmQgJiByZW1vdmUgIj8iCgogICAgICAgIGhvc3RuYW1lID0gaG9zdG5hbWUuc3BsaXQoIj8iKVswXTsgLy9FeHRyYWN0IGhvc3RuYW1lCgogICAgICAgIHZhciBleHRyYWN0ZWRVcmwgPSBwc2wuZ2V0KGhvc3RuYW1lKTsgLy9NYWtlIEFQSSBjYWxsCgogICAgICAgIGF3YWl0IEFwaS5nZXQoYHdob2lzLyR7ZXh0cmFjdGVkVXJsfWApLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgLy9BZGQgcmVzdWx0IHRvIGFycmF5CiAgICAgICAgICB3aG9pcy5wdXNoKHJlc3VsdC5kYXRhKTsKICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFQSSBFUlJPUiIpOwogICAgICAgIH0pOwogICAgICB9IC8vQXNzaWduIGxvY2FsIHZhcmlhYmxlCgoKICAgICAgY29tbWl0KCdTQVZFX1dIT0lTJywgd2hvaXMpOwogICAgfSwKCiAgICBsb2FkVHdpdHRlclRyZW5kc1VLKCkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIEFwaS5nZXQoYHR3aXR0ZXIvdHJlbmRzLzQ0NDE4YCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgc2VsZi5jb21taXQoJ1NBVkVfVFdJVFRFUl9UUkVORFNfVUsnLCByZXN1bHQuZGF0YSk7CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFQSSBFUlJPUiIpOwogICAgICB9KTsKICAgIH0sCgogICAgbG9hZFR3aXR0ZXJUcmVuZHNVUygpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICBBcGkuZ2V0KGB0d2l0dGVyL3RyZW5kcy8yNDU5MTE1YCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgc2VsZi5jb21taXQoJ1NBVkVfVFdJVFRFUl9UUkVORFNfVVMnLCByZXN1bHQuZGF0YSk7CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFQSSBFUlJPUiIpOwogICAgICB9KTsKICAgIH0sCgogICAgc2V0VGFiKHsKICAgICAgY29tbWl0CiAgICB9LCB0YWIpIHsKICAgICAgdGhpcy5jb21taXQoJ1NBVkVfVEFCJywgdGFiKTsKICAgIH0KCiAgfQp9KTs="},{"version":3,"sources":["/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js"],"names":["Vue","Vuex","Api","psl","use","store","Store","state","rawTweet","tweet","twitterTrendsUS","twitterTrendsUK","whois","isLoading","tab","mutations","SAVE_RAW_TWEET","SAVE_TWEET","SAVE_TWITTER_TRENDS_US","SAVE_TWITTER_TRENDS_UK","SAVE_WHOIS","TOGGLE_IS_LOADING","SAVE_TAB","actions","loadRawTweet","commit","id","get","then","result","data","catch","error","Error","loadTweet","dispatch","loadWhois","urls","entities","i","length","url","expanded_url","hostname","indexOf","split","extractedUrl","push","loadTwitterTrendsUK","self","loadTwitterTrendsUS","setTab"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport Api from '../services/Api'\nimport psl from \"psl\";\n\nVue.use(Vuex)\n\nexport const store = new Vuex.Store({\n    state: {\n        rawTweet: {},\n        tweet: {},\n        twitterTrendsUS: [],\n        twitterTrendsUK: [],\n        whois: null,\n        isLoading: false,\n        tab: 0\n    },\n    mutations: {\n        SAVE_RAW_TWEET(state, rawTweet) {\n            state.rawTweet = rawTweet;\n        },\n        SAVE_TWEET(state, tweet) {\n            state.tweet = tweet;\n        },\n        SAVE_TWITTER_TRENDS_US(state, twitterTrendsUS) {\n            state.twitterTrendsUS = twitterTrendsUS;\n        },\n        SAVE_TWITTER_TRENDS_UK(state, twitterTrendsUK) {\n            state.twitterTrendsUK = twitterTrendsUK;\n        },\n        SAVE_WHOIS(state, whois) {\n            state.whois = whois;\n        },\n        TOGGLE_IS_LOADING(state) {\n            state.isLoading = !state.isLoading;\n        },\n        SAVE_TAB(state, tab) {\n            state.tab = tab;\n        }\n    },\n    actions: {\n        /**\n        * Call API to load Tweet and highlight\n        * @param {*} param0 \n        * @param {*} id \n        */\n        loadRawTweet({ commit }, id) {\n\n            //Make API call\n            Api.get(`twitter/tweet/${id}`)\n                .then(function (result) {\n\n                    commit('SAVE_RAW_TWEET', result.data)\n\n                    //Throw error if needed\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        /**\n         * Call API to load Tweet and highlight\n         * @param {*} param0 \n         * @param {*} id \n         */\n        async loadTweet({ commit, dispatch }, id) {\n\n            //Assign modified tweet to state\n            await Api.get(`twitter/tweet/${id}`)\n                .then(function (result) {\n                    commit('SAVE_TWEET', result.data);\n                    //Throw error if needed\n                }).then(function () {\n                    dispatch('loadWhois');\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n\n\n        },\n        async loadWhois({ commit, state }) {\n\n\n            var urls = state.tweet.entities.urls;\n            var whois = [];\n\n            //Performs whois on each hostname in Tweet\n            for (let i = 0; i < urls.length; i++) {\n\n                var url = urls[i].expanded_url;\n                var hostname;\n                //find & remove protocol (http, ftp, etc.) and get hostname\n\n                if (url.indexOf(\"//\") > -1) {\n                    hostname = url.split(\"/\")[2];\n                } else {\n                    hostname = url.split(\"/\")[0];\n                }\n\n                //find & remove port number\n                hostname = hostname.split(\":\")[0];\n                //find & remove \"?\"\n                hostname = hostname.split(\"?\")[0];\n\n                //Extract hostname\n                var extractedUrl = psl.get(hostname);\n\n                //Make API call\n                await Api.get(`whois/${extractedUrl}`)\n                    .then(function (result) {\n\n                        //Add result to array\n                        whois.push(result.data);\n                    })\n                    .catch(error => {\n                        throw new Error(\"API ERROR\");\n                    });\n            }\n\n            //Assign local variable\n            commit('SAVE_WHOIS', whois);\n        },\n        loadTwitterTrendsUK() {\n            var self = this;\n\n            Api.get(`twitter/trends/44418`)\n                .then(function (result) {\n                    self.commit('SAVE_TWITTER_TRENDS_UK', result.data);\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        loadTwitterTrendsUS() {\n            var self = this;\n\n            Api.get(`twitter/trends/2459115`)\n                .then(function (result) {\n                    self.commit('SAVE_TWITTER_TRENDS_US', result.data);\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        setTab({ commit }, tab) {\n            this.commit('SAVE_TAB', tab);\n        }\n    }\n});"]}]}