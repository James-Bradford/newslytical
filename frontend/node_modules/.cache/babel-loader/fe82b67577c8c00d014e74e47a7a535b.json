{"remainingRequest":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/newslytical-frontend/node_modules/babel-loader/lib/index.js!/Users/jamesbradford/Documents/Dissertation Repository/Repos/newslytical-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/jamesbradford/Documents/Dissertation Repository/Repos/newslytical-frontend/src/store/store.js","dependencies":[{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/newslytical-frontend/src/store/store.js","mtime":1594222013596},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/newslytical-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/newslytical-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/newslytical-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgVnVleCBmcm9tICd2dWV4JzsKaW1wb3J0IEFwaSBmcm9tICcuLi9zZXJ2aWNlcy9BcGknOwpWdWUudXNlKFZ1ZXgpOwpleHBvcnQgY29uc3Qgc3RvcmUgPSBuZXcgVnVleC5TdG9yZSh7CiAgc3RhdGU6IHsKICAgIHR3ZWV0OiB7fSwKICAgIHdob2lzOiBbXSwKICAgIHRhYjogTnVtYmVyCiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIFNBVkVfVFdFRVQoc3RhdGUsIHR3ZWV0KSB7CiAgICAgIHN0YXRlLnR3ZWV0ID0gdHdlZXQ7CiAgICB9LAoKICAgIFNBVkVfV0hPSVMoc3RhdGUsIHdob2lzKSB7CiAgICAgIHN0YXRlLndob2lzID0gd2hvaXM7CiAgICB9LAoKICAgIFNBVkVfVEFCKHN0YXRlLCB0YWIpIHsKICAgICAgc3RhdGUudGFiID0gdGFiOwogICAgfQoKICB9LAogIGFjdGlvbnM6IHsKICAgIC8qKgogICAgICogQ2FsbCBBUEkgdG8gbG9hZCBUd2VldCBhbmQgaGlnaGxpZ2h0CiAgICAgKiBAcGFyYW0geyp9IHBhcmFtMCAKICAgICAqIEBwYXJhbSB7Kn0gaWQgCiAgICAgKi8KICAgIGxvYWRUd2VldCh7CiAgICAgIGNvbW1pdCwKICAgICAgc3RhdGUKICAgIH0sIGlkKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsgLy9NYWtlIEFQSSBjYWxsCgogICAgICBBcGkuZ2V0KGB0d2l0dGVyLyR7aWR9YCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgLy9TZXQgdmFyaWFibGVzCiAgICAgICAgdmFyIHR3ZWV0ID0gcmVzdWx0LmRhdGE7CiAgICAgICAgY29uc3QgdXJscyA9IHR3ZWV0LmVudGl0aWVzLnVybHM7CiAgICAgICAgY29uc3QgaGFzaHRhZ3MgPSB0d2VldC5lbnRpdGllcy5oYXNodGFnczsgLy9Gb3IgZWFjaCBVUkwsIHJlcGxhY2UgaXQgd2l0aCBoaWdobGlnaHRlZCB2ZXJzaW9uCgogICAgICAgIGZvciAobGV0IGkgaW4gdXJscykgewogICAgICAgICAgdHdlZXQuZnVsbF90ZXh0ID0gdHdlZXQuZnVsbF90ZXh0LnJlcGxhY2UodXJsc1tpXS51cmwsIGA8c3BhbiBjbGFzcz0iaGlnaGxpZ2h0VVJMIj4ke3VybHNbaV0uZXhwYW5kZWRfdXJsfTwvc3Bhbj5gKTsKICAgICAgICB9IC8vRm9yIGVhY2ggaGFzaHRhZywgcmVwbGFjZSBpdCB3aXRoIGhpZ2hsaWdodGVkIHZlcnNpb24KCgogICAgICAgIGZvciAobGV0IGkgaW4gaGFzaHRhZ3MpIHsKICAgICAgICAgIHR3ZWV0LmZ1bGxfdGV4dCA9IHR3ZWV0LmZ1bGxfdGV4dC5yZXBsYWNlKCIjIiArIGhhc2h0YWdzW2ldLnRleHQsIGA8c3BhbiBjbGFzcz0iaGlnaGxpZ2h0SGFzaHRhZyI+IyR7aGFzaHRhZ3NbaV0udGV4dH08L3NwYW4+YCk7CiAgICAgICAgfSAvL0Fzc2lnbiBtb2RpZmllZCB0d2VldCB0byBzdGF0ZQoKCiAgICAgICAgc2VsZi5jb21taXQoJ1NBVkVfVFdFRVQnLCB0d2VldCk7IC8vVGhyb3cgZXJyb3IgaWYgbmVlZGVkCiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFQSSBFUlJPUiIpOwogICAgICB9KTsKICAgIH0sCgogICAgbG9hZFdob2lzKHsKICAgICAgc3RhdGUKICAgIH0pIHsKICAgICAgdmFyIHVybHMgPSBzdGF0ZS50d2VldC5lbnRpdGllcy51cmxzOwogICAgICB2YXIgd2hvaXMgPSBbXTsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB1cmxzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgQXBpLmdldChgd2hvaXMvJHt1cmxzW2ldfWApLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgd2hvaXMucHVzaChyZXN1bHQuZGF0YSk7CiAgICAgICAgICBzZWxmLmNvbW1pdCgnU0FWRV9XSE9JUycsIHdob2lzKTsKICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFQSSBFUlJPUiIpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAoKICAgIHNldFRhYih7CiAgICAgIGNvbW1pdAogICAgfSwgdGFiKSB7CiAgICAgIHRoaXMuY29tbWl0KCdTQVZFX1RBQicsIHRhYik7CiAgICB9CgogIH0KfSk7"},{"version":3,"sources":["/Users/jamesbradford/Documents/Dissertation Repository/Repos/newslytical-frontend/src/store/store.js"],"names":["Vue","Vuex","Api","use","store","Store","state","tweet","whois","tab","Number","mutations","SAVE_TWEET","SAVE_WHOIS","SAVE_TAB","actions","loadTweet","commit","id","self","get","then","result","data","urls","entities","hashtags","i","full_text","replace","url","expanded_url","text","catch","error","Error","loadWhois","length","push","setTab"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport Api from '../services/Api'\n\nVue.use(Vuex)\n\nexport const store = new Vuex.Store({\n    state: {\n        tweet: {},\n        whois: [],\n        tab: Number\n    },\n    mutations: {\n        SAVE_TWEET(state, tweet) {\n            state.tweet = tweet;\n        },\n        SAVE_WHOIS(state, whois) {\n            state.whois = whois;\n        },\n        SAVE_TAB(state, tab) {\n            state.tab = tab;\n        }\n    },\n    actions: {\n        /**\n         * Call API to load Tweet and highlight\n         * @param {*} param0 \n         * @param {*} id \n         */\n        loadTweet({ commit, state }, id) {\n            var self = this;\n\n            //Make API call\n            Api.get(`twitter/${id}`)\n                .then(function (result) {\n                    //Set variables\n                    var tweet = result.data;\n                    const urls = tweet.entities.urls;\n                    const hashtags = tweet.entities.hashtags;\n\n                    //For each URL, replace it with highlighted version\n                    for (let i in urls) {\n                        tweet.full_text = tweet.full_text.replace(urls[i].url, `<span class=\"highlightURL\">${urls[i].expanded_url}</span>`);\n                    }\n\n                    //For each hashtag, replace it with highlighted version\n                    for (let i in hashtags) {\n                        tweet.full_text = tweet.full_text.replace(\"#\" + hashtags[i].text, `<span class=\"highlightHashtag\">#${hashtags[i].text}</span>`)\n                    }\n\n                    //Assign modified tweet to state\n                    self.commit('SAVE_TWEET', tweet)\n\n                //Throw error if needed\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        loadWhois({state}) {\n            var urls = state.tweet.entities.urls;\n            var whois = [];\n            var self = this;\n\n            for (let i = 1; i < urls.length; i++ ) {\n                Api.get(`whois/${urls[i]}`)\n                .then(function (result) {\n                    whois.push(result.data);\n                    self.commit('SAVE_WHOIS', whois);\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n            }\n         \n        },\n        setTab({ commit }, tab) {\n            this.commit('SAVE_TAB', tab);\n        }\n    }\n});"]}]}