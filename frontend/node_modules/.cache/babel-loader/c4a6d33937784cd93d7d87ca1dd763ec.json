{"remainingRequest":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/babel-loader/lib/index.js!/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js","dependencies":[{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js","mtime":1594817923945},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgVnVleCBmcm9tICd2dWV4JzsKaW1wb3J0IEFwaSBmcm9tICcuLi9zZXJ2aWNlcy9BcGknOwppbXBvcnQgcHNsIGZyb20gInBzbCI7ClZ1ZS51c2UoVnVleCk7CmV4cG9ydCBjb25zdCBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHsKICBzdGF0ZTogewogICAgcmF3VHdlZXQ6IHt9LAogICAgdHdlZXQ6IHt9LAogICAgdHdpdHRlclRyZW5kc1VTOiBbXSwKICAgIHR3aXR0ZXJUcmVuZHNVSzogW10sCiAgICB3aG9pczogbnVsbCwKICAgIHRhYjogTnVtYmVyCiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIFNBVkVfUkFXX1RXRUVUKHN0YXRlLCByYXdUd2VldCkgewogICAgICBzdGF0ZS5yYXdUd2VldCA9IHJhd1R3ZWV0OwogICAgfSwKCiAgICBTQVZFX1RXRUVUKHN0YXRlLCB0d2VldCkgewogICAgICBzdGF0ZS50d2VldCA9IHR3ZWV0OwogICAgfSwKCiAgICBTQVZFX1RXSVRURVJfVFJFTkRTX1VTKHN0YXRlLCB0d2l0dGVyVHJlbmRzVVMpIHsKICAgICAgc3RhdGUudHdpdHRlclRyZW5kc1VTID0gdHdpdHRlclRyZW5kc1VTOwogICAgfSwKCiAgICBTQVZFX1RXSVRURVJfVFJFTkRTX1VLKHN0YXRlLCB0d2l0dGVyVHJlbmRzVUspIHsKICAgICAgc3RhdGUudHdpdHRlclRyZW5kc1VLID0gdHdpdHRlclRyZW5kc1VLOwogICAgfSwKCiAgICBTQVZFX1dIT0lTKHN0YXRlLCB3aG9pcykgewogICAgICBzdGF0ZS53aG9pcyA9IHdob2lzOwogICAgfSwKCiAgICBTQVZFX1RBQihzdGF0ZSwgdGFiKSB7CiAgICAgIHN0YXRlLnRhYiA9IHRhYjsKICAgIH0KCiAgfSwKICBhY3Rpb25zOiB7CiAgICAvKioKICAgICogQ2FsbCBBUEkgdG8gbG9hZCBUd2VldCBhbmQgaGlnaGxpZ2h0CiAgICAqIEBwYXJhbSB7Kn0gcGFyYW0wIAogICAgKiBAcGFyYW0geyp9IGlkIAogICAgKi8KICAgIGxvYWRSYXdUd2VldCh7CiAgICAgIGNvbW1pdAogICAgfSwgaWQpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOyAvL01ha2UgQVBJIGNhbGwKCiAgICAgIEFwaS5nZXQoYHR3aXR0ZXIvdHdlZXQvJHtpZH1gKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBzZWxmLmNvbW1pdCgnU0FWRV9SQVdfVFdFRVQnLCByZXN1bHQuZGF0YSk7IC8vVGhyb3cgZXJyb3IgaWYgbmVlZGVkCiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFQSSBFUlJPUiIpOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBDYWxsIEFQSSB0byBsb2FkIFR3ZWV0IGFuZCBoaWdobGlnaHQKICAgICAqIEBwYXJhbSB7Kn0gcGFyYW0wIAogICAgICogQHBhcmFtIHsqfSBpZCAKICAgICAqLwogICAgbG9hZFR3ZWV0KHsKICAgICAgY29tbWl0LAogICAgICBzdGF0ZQogICAgfSwgaWQpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB2YXIgdHdlZXQgPSB7fTsKICAgICAgdmFyIHVybHMgPSBbXTsKICAgICAgdmFyIHdob2lzID0gW107IC8vTWFrZSBBUEkgY2FsbAoKICAgICAgQXBpLmdldChgdHdpdHRlci90d2VldC8ke2lkfWApLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIC8vU2V0IHZhcmlhYmxlcwogICAgICAgIHR3ZWV0ID0gcmVzdWx0LmRhdGE7CiAgICAgICAgdXJscyA9IHR3ZWV0LmVudGl0aWVzLnVybHM7CiAgICAgICAgY29uc3QgaGFzaHRhZ3MgPSB0d2VldC5lbnRpdGllcy5oYXNodGFnczsgLy9Gb3IgZWFjaCBVUkwsIHJlcGxhY2UgaXQgd2l0aCBoaWdobGlnaHRlZCB2ZXJzaW9uCgogICAgICAgIGZvciAobGV0IGkgaW4gdXJscykgewogICAgICAgICAgdHdlZXQuZnVsbF90ZXh0ID0gdHdlZXQuZnVsbF90ZXh0LnJlcGxhY2UodXJsc1tpXS51cmwsIGA8c3BhbiBjbGFzcz0iaGlnaGxpZ2h0VVJMIj4ke3VybHNbaV0uZXhwYW5kZWRfdXJsfTwvc3Bhbj5gKTsKICAgICAgICB9IC8vRm9yIGVhY2ggaGFzaHRhZywgcmVwbGFjZSBpdCB3aXRoIGhpZ2hsaWdodGVkIHZlcnNpb24KCgogICAgICAgIGZvciAobGV0IGkgaW4gaGFzaHRhZ3MpIHsKICAgICAgICAgIHR3ZWV0LmZ1bGxfdGV4dCA9IHR3ZWV0LmZ1bGxfdGV4dC5yZXBsYWNlKCIjIiArIGhhc2h0YWdzW2ldLnRleHQsIGA8c3BhbiBjbGFzcz0iaGlnaGxpZ2h0SGFzaHRhZyI+IyR7aGFzaHRhZ3NbaV0udGV4dH08L3NwYW4+YCk7CiAgICAgICAgfSAvL0Fzc2lnbiBtb2RpZmllZCB0d2VldCB0byBzdGF0ZQoKCiAgICAgICAgc2VsZi5jb21taXQoJ1NBVkVfVFdFRVQnLCB0d2VldCk7IC8vVGhyb3cgZXJyb3IgaWYgbmVlZGVkCiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFQSSBFUlJPUiIpOwogICAgICB9KTsgLy9QZXJmb3JtcyB3aG9pcyBvbiBlYWNoIGhvc3RuYW1lIGluIFR3ZWV0CgogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgaG9zdG5hbWU7IC8vZmluZCAmIHJlbW92ZSBwcm90b2NvbCAoaHR0cCwgZnRwLCBldGMuKSBhbmQgZ2V0IGhvc3RuYW1lCgogICAgICAgIGlmICh1cmwuaW5kZXhPZigiLy8iKSA+IC0xKSB7CiAgICAgICAgICBob3N0bmFtZSA9IHVybC5zcGxpdCgiLyIpWzJdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBob3N0bmFtZSA9IHVybC5zcGxpdCgiLyIpWzBdOwogICAgICAgIH0gLy9maW5kICYgcmVtb3ZlIHBvcnQgbnVtYmVyCgoKICAgICAgICBob3N0bmFtZSA9IGhvc3RuYW1lLnNwbGl0KCI6IilbMF07IC8vZmluZCAmIHJlbW92ZSAiPyIKCiAgICAgICAgaG9zdG5hbWUgPSBob3N0bmFtZS5zcGxpdCgiPyIpWzBdOyAvL0V4dHJhY3QgaG9zdG5hbWUKCiAgICAgICAgdmFyIHVybCA9IHBzbC5nZXQoaG9zdG5hbWUpOyAvL01ha2UgQVBJIGNhbGwKCiAgICAgICAgQXBpLmdldChgd2hvaXMvJHt1cmx9YCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAvL0FkZCByZXN1bHQgdG8gYXJyYXkKICAgICAgICAgIHdob2lzLnB1c2gocmVzdWx0LmRhdGEpOwogICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQVBJIEVSUk9SIik7CiAgICAgICAgfSk7CiAgICAgIH0gLy9Bc3NpZ24gbG9jYWwgdmFyaWFibGUKCgogICAgICB0aGlzLmNvbW1pdCgnU0FWRV9XSE9JUycsIHdob2lzKTsKICAgIH0sCgogICAgbG9hZFR3aXR0ZXJUcmVuZHNVSygpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICBBcGkuZ2V0KGB0d2l0dGVyL3RyZW5kcy80NDQxOGApLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIHNlbGYuY29tbWl0KCdTQVZFX1RXSVRURVJfVFJFTkRTX1VLJywgcmVzdWx0LmRhdGEpOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJBUEkgRVJST1IiKTsKICAgICAgfSk7CiAgICB9LAoKICAgIGxvYWRUd2l0dGVyVHJlbmRzVVMoKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgQXBpLmdldChgdHdpdHRlci90cmVuZHMvMjQ1OTExNWApLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIHNlbGYuY29tbWl0KCdTQVZFX1RXSVRURVJfVFJFTkRTX1VTJywgcmVzdWx0LmRhdGEpOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJBUEkgRVJST1IiKTsKICAgICAgfSk7CiAgICB9LAoKICAgIHNldFRhYih7CiAgICAgIGNvbW1pdAogICAgfSwgdGFiKSB7CiAgICAgIHRoaXMuY29tbWl0KCdTQVZFX1RBQicsIHRhYik7CiAgICB9CgogIH0KfSk7"},{"version":3,"sources":["/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js"],"names":["Vue","Vuex","Api","psl","use","store","Store","state","rawTweet","tweet","twitterTrendsUS","twitterTrendsUK","whois","tab","Number","mutations","SAVE_RAW_TWEET","SAVE_TWEET","SAVE_TWITTER_TRENDS_US","SAVE_TWITTER_TRENDS_UK","SAVE_WHOIS","SAVE_TAB","actions","loadRawTweet","commit","id","self","get","then","result","data","catch","error","Error","loadTweet","urls","entities","hashtags","i","full_text","replace","url","expanded_url","text","length","hostname","indexOf","split","push","loadTwitterTrendsUK","loadTwitterTrendsUS","setTab"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport Api from '../services/Api'\nimport psl from \"psl\";\n\nVue.use(Vuex)\n\nexport const store = new Vuex.Store({\n    state: {\n        rawTweet: {},\n        tweet: {},\n        twitterTrendsUS: [],\n        twitterTrendsUK: [],\n        whois: null,\n        tab: Number\n    },\n    mutations: {\n        SAVE_RAW_TWEET(state, rawTweet) {\n            state.rawTweet = rawTweet;\n        },\n        SAVE_TWEET(state, tweet) {\n            state.tweet = tweet;\n        },\n        SAVE_TWITTER_TRENDS_US(state, twitterTrendsUS) {\n            state.twitterTrendsUS = twitterTrendsUS;\n        },\n        SAVE_TWITTER_TRENDS_UK(state, twitterTrendsUK) {\n            state.twitterTrendsUK = twitterTrendsUK;\n        },\n        SAVE_WHOIS(state, whois) {\n            state.whois = whois;\n        },\n        SAVE_TAB(state, tab) {\n            state.tab = tab;\n        }\n    },\n    actions: {\n        /**\n        * Call API to load Tweet and highlight\n        * @param {*} param0 \n        * @param {*} id \n        */\n        loadRawTweet({ commit }, id) {\n            var self = this;\n\n            //Make API call\n            Api.get(`twitter/tweet/${id}`)\n                .then(function (result) {\n\n                    self.commit('SAVE_RAW_TWEET', result.data)\n\n                    //Throw error if needed\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        /**\n         * Call API to load Tweet and highlight\n         * @param {*} param0 \n         * @param {*} id \n         */\n        loadTweet({ commit, state }, id) {\n            var self = this;\n            var tweet = {};\n            var urls = [];\n            var whois = [];\n\n            //Make API call\n            Api.get(`twitter/tweet/${id}`)\n                .then(function (result) {\n                    //Set variables\n                    tweet = result.data;\n                    urls = tweet.entities.urls;\n                    const hashtags = tweet.entities.hashtags;\n\n                    //For each URL, replace it with highlighted version\n                    for (let i in urls) {\n                        tweet.full_text = tweet.full_text.replace(urls[i].url, `<span class=\"highlightURL\">${urls[i].expanded_url}</span>`);\n                    }\n\n                    //For each hashtag, replace it with highlighted version\n                    for (let i in hashtags) {\n                        tweet.full_text = tweet.full_text.replace(\"#\" + hashtags[i].text, `<span class=\"highlightHashtag\">#${hashtags[i].text}</span>`)\n                    }\n\n                    //Assign modified tweet to state\n                    self.commit('SAVE_TWEET', tweet)\n\n                    //Throw error if needed\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n\n            //Performs whois on each hostname in Tweet\n            for (let i = 0; i < urls.length; i++) {\n\n                var hostname;\n                //find & remove protocol (http, ftp, etc.) and get hostname\n\n                if (url.indexOf(\"//\") > -1) {\n                    hostname = url.split(\"/\")[2];\n                } else {\n                    hostname = url.split(\"/\")[0];\n                }\n\n                //find & remove port number\n                hostname = hostname.split(\":\")[0];\n                //find & remove \"?\"\n                hostname = hostname.split(\"?\")[0];\n\n                //Extract hostname\n                var url = psl.get(hostname);\n\n                //Make API call\n                Api.get(`whois/${url}`)\n                    .then(function (result) {\n\n                        //Add result to array\n                        whois.push(result.data);\n                    })\n                    .catch(error => {\n                        throw new Error(\"API ERROR\");\n                    });\n                }\n\n                //Assign local variable\n                this.commit('SAVE_WHOIS', whois);\n            },\n            loadTwitterTrendsUK() {\n                var self = this;\n\n                Api.get(`twitter/trends/44418`)\n                    .then(function (result) {\n                        self.commit('SAVE_TWITTER_TRENDS_UK', result.data);\n                    }).catch(error => {\n                        throw new Error(\"API ERROR\");\n                    });\n            },\n            loadTwitterTrendsUS() {\n                var self = this;\n\n                Api.get(`twitter/trends/2459115`)\n                    .then(function (result) {\n                        self.commit('SAVE_TWITTER_TRENDS_US', result.data);\n                    }).catch(error => {\n                        throw new Error(\"API ERROR\");\n                    });\n            },\n            setTab({ commit }, tab) {\n                this.commit('SAVE_TAB', tab);\n            }\n        }\n    });"]}]}