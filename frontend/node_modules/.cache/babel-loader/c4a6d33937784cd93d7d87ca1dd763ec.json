{"remainingRequest":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/babel-loader/lib/index.js!/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js","dependencies":[{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js","mtime":1595081466987},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgVnVleCBmcm9tICd2dWV4JzsKaW1wb3J0IEFwaSBmcm9tICcuLi9zZXJ2aWNlcy9BcGknOwppbXBvcnQgcHNsIGZyb20gInBzbCI7ClZ1ZS51c2UoVnVleCk7CmV4cG9ydCBjb25zdCBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHsKICBzdGF0ZTogewogICAgcmF3VHdlZXQ6IHt9LAogICAgdHdlZXQ6IHt9LAogICAgdHdpdHRlclRyZW5kc1VTOiBbXSwKICAgIHR3aXR0ZXJUcmVuZHNVSzogW10sCiAgICB3aG9pczogbnVsbCwKICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICB0YWI6IE51bWJlcgogIH0sCiAgbXV0YXRpb25zOiB7CiAgICBTQVZFX1JBV19UV0VFVChzdGF0ZSwgcmF3VHdlZXQpIHsKICAgICAgc3RhdGUucmF3VHdlZXQgPSByYXdUd2VldDsKICAgIH0sCgogICAgU0FWRV9UV0VFVChzdGF0ZSwgdHdlZXQpIHsKICAgICAgc3RhdGUudHdlZXQgPSB0d2VldDsKICAgIH0sCgogICAgU0FWRV9UV0lUVEVSX1RSRU5EU19VUyhzdGF0ZSwgdHdpdHRlclRyZW5kc1VTKSB7CiAgICAgIHN0YXRlLnR3aXR0ZXJUcmVuZHNVUyA9IHR3aXR0ZXJUcmVuZHNVUzsKICAgIH0sCgogICAgU0FWRV9UV0lUVEVSX1RSRU5EU19VSyhzdGF0ZSwgdHdpdHRlclRyZW5kc1VLKSB7CiAgICAgIHN0YXRlLnR3aXR0ZXJUcmVuZHNVSyA9IHR3aXR0ZXJUcmVuZHNVSzsKICAgIH0sCgogICAgU0FWRV9XSE9JUyhzdGF0ZSwgd2hvaXMpIHsKICAgICAgc3RhdGUud2hvaXMgPSB3aG9pczsKICAgIH0sCgogICAgU0FWRV9JU19MT0FESU5HKHN0YXRlLCBpc0xvYWRpbmcpIHsKICAgICAgc3RhdGUuaXNMb2FkaW5nID0gaXNMb2FkaW5nOwogICAgfSwKCiAgICBTQVZFX1RBQihzdGF0ZSwgdGFiKSB7CiAgICAgIHN0YXRlLnRhYiA9IHRhYjsKICAgIH0KCiAgfSwKICBhY3Rpb25zOiB7CiAgICAvKioKICAgICogQ2FsbCBBUEkgdG8gbG9hZCBUd2VldCBhbmQgaGlnaGxpZ2h0CiAgICAqIEBwYXJhbSB7Kn0gcGFyYW0wIAogICAgKiBAcGFyYW0geyp9IGlkIAogICAgKi8KICAgIGxvYWRSYXdUd2VldCh7CiAgICAgIGNvbW1pdAogICAgfSwgaWQpIHsKICAgICAgLy9NYWtlIEFQSSBjYWxsCiAgICAgIEFwaS5nZXQoYHR3aXR0ZXIvdHdlZXQvJHtpZH1gKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBjb21taXQoJ1NBVkVfUkFXX1RXRUVUJywgcmVzdWx0LmRhdGEpOyAvL1Rocm93IGVycm9yIGlmIG5lZWRlZAogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJBUEkgRVJST1IiKTsKICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogQ2FsbCBBUEkgdG8gbG9hZCBUd2VldCBhbmQgaGlnaGxpZ2h0CiAgICAgKiBAcGFyYW0geyp9IHBhcmFtMCAKICAgICAqIEBwYXJhbSB7Kn0gaWQgCiAgICAgKi8KICAgIGFzeW5jIGxvYWRUd2VldCh7CiAgICAgIGNvbW1pdCwKICAgICAgZGlzcGF0Y2gKICAgIH0sIGlkKSB7CiAgICAgIC8vQXNzaWduIG1vZGlmaWVkIHR3ZWV0IHRvIHN0YXRlCiAgICAgIGF3YWl0IEFwaS5nZXQoYHR3aXR0ZXIvdHdlZXQvJHtpZH1gKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBjb21taXQoJ1NBVkVfVFdFRVQnLCByZXN1bHQuZGF0YSk7IC8vVGhyb3cgZXJyb3IgaWYgbmVlZGVkCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIGRpc3BhdGNoKCdsb2FkV2hvaXMnKTsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IG5ldyBFcnJvcigiQVBJIEVSUk9SIik7CiAgICAgIH0pOwogICAgfSwKCiAgICBhc3luYyBsb2FkV2hvaXMoewogICAgICBjb21taXQsCiAgICAgIHN0YXRlCiAgICB9KSB7CiAgICAgIHZhciB1cmxzID0gc3RhdGUudHdlZXQuZW50aXRpZXMudXJsczsKICAgICAgdmFyIHdob2lzID0gW107IC8vUGVyZm9ybXMgd2hvaXMgb24gZWFjaCBob3N0bmFtZSBpbiBUd2VldAoKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1cmxzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHVybCA9IHVybHNbaV0uZXhwYW5kZWRfdXJsOwogICAgICAgIHZhciBob3N0bmFtZTsgLy9maW5kICYgcmVtb3ZlIHByb3RvY29sIChodHRwLCBmdHAsIGV0Yy4pIGFuZCBnZXQgaG9zdG5hbWUKCiAgICAgICAgaWYgKHVybC5pbmRleE9mKCIvLyIpID4gLTEpIHsKICAgICAgICAgIGhvc3RuYW1lID0gdXJsLnNwbGl0KCIvIilbMl07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGhvc3RuYW1lID0gdXJsLnNwbGl0KCIvIilbMF07CiAgICAgICAgfSAvL2ZpbmQgJiByZW1vdmUgcG9ydCBudW1iZXIKCgogICAgICAgIGhvc3RuYW1lID0gaG9zdG5hbWUuc3BsaXQoIjoiKVswXTsgLy9maW5kICYgcmVtb3ZlICI/IgoKICAgICAgICBob3N0bmFtZSA9IGhvc3RuYW1lLnNwbGl0KCI/IilbMF07IC8vRXh0cmFjdCBob3N0bmFtZQoKICAgICAgICB2YXIgZXh0cmFjdGVkVXJsID0gcHNsLmdldChob3N0bmFtZSk7IC8vTWFrZSBBUEkgY2FsbAoKICAgICAgICBhd2FpdCBBcGkuZ2V0KGB3aG9pcy8ke2V4dHJhY3RlZFVybH1gKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIC8vQWRkIHJlc3VsdCB0byBhcnJheQogICAgICAgICAgd2hvaXMucHVzaChyZXN1bHQuZGF0YSk7CiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJBUEkgRVJST1IiKTsKICAgICAgICB9KTsKICAgICAgfSAvL0Fzc2lnbiBsb2NhbCB2YXJpYWJsZQoKCiAgICAgIGNvbW1pdCgnU0FWRV9XSE9JUycsIHdob2lzKTsKICAgIH0sCgogICAgbG9hZElzTG9hZGluZyh7CiAgICAgIGNvbW1pdAogICAgfSwgaXNMb2FkaW5nKSB7CiAgICAgIGlmIChpc0xvYWRpbmcpIHsKICAgICAgICBjb21taXQoJ1NBVkVfSVNfTE9BRElORycsIHRydWUpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbW1pdCgnU0FWRV9JU19MT0FESU5HJywgZmFsc2UpOwogICAgICB9CiAgICB9LAoKICAgIGxvYWRUd2l0dGVyVHJlbmRzVUsoKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgQXBpLmdldChgdHdpdHRlci90cmVuZHMvNDQ0MThgKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBzZWxmLmNvbW1pdCgnU0FWRV9UV0lUVEVSX1RSRU5EU19VSycsIHJlc3VsdC5kYXRhKTsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IG5ldyBFcnJvcigiQVBJIEVSUk9SIik7CiAgICAgIH0pOwogICAgfSwKCiAgICBsb2FkVHdpdHRlclRyZW5kc1VTKCkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIEFwaS5nZXQoYHR3aXR0ZXIvdHJlbmRzLzI0NTkxMTVgKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBzZWxmLmNvbW1pdCgnU0FWRV9UV0lUVEVSX1RSRU5EU19VUycsIHJlc3VsdC5kYXRhKTsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IG5ldyBFcnJvcigiQVBJIEVSUk9SIik7CiAgICAgIH0pOwogICAgfSwKCiAgICBzZXRUYWIoewogICAgICBjb21taXQKICAgIH0sIHRhYikgewogICAgICB0aGlzLmNvbW1pdCgnU0FWRV9UQUInLCB0YWIpOwogICAgfQoKICB9Cn0pOw=="},{"version":3,"sources":["/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js"],"names":["Vue","Vuex","Api","psl","use","store","Store","state","rawTweet","tweet","twitterTrendsUS","twitterTrendsUK","whois","isLoading","tab","Number","mutations","SAVE_RAW_TWEET","SAVE_TWEET","SAVE_TWITTER_TRENDS_US","SAVE_TWITTER_TRENDS_UK","SAVE_WHOIS","SAVE_IS_LOADING","SAVE_TAB","actions","loadRawTweet","commit","id","get","then","result","data","catch","error","Error","loadTweet","dispatch","loadWhois","urls","entities","i","length","url","expanded_url","hostname","indexOf","split","extractedUrl","push","loadIsLoading","loadTwitterTrendsUK","self","loadTwitterTrendsUS","setTab"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport Api from '../services/Api'\nimport psl from \"psl\";\n\nVue.use(Vuex)\n\nexport const store = new Vuex.Store({\n    state: {\n        rawTweet: {},\n        tweet: {},\n        twitterTrendsUS: [],\n        twitterTrendsUK: [],\n        whois: null,\n        isLoading: false,\n        tab: Number\n    },\n    mutations: {\n        SAVE_RAW_TWEET(state, rawTweet) {\n            state.rawTweet = rawTweet;\n        },\n        SAVE_TWEET(state, tweet) {\n            state.tweet = tweet;\n        },\n        SAVE_TWITTER_TRENDS_US(state, twitterTrendsUS) {\n            state.twitterTrendsUS = twitterTrendsUS;\n        },\n        SAVE_TWITTER_TRENDS_UK(state, twitterTrendsUK) {\n            state.twitterTrendsUK = twitterTrendsUK;\n        },\n        SAVE_WHOIS(state, whois) {\n            state.whois = whois;\n        },\n        SAVE_IS_LOADING(state, isLoading) {\n            state.isLoading = isLoading;\n        },\n        SAVE_TAB(state, tab) {\n            state.tab = tab;\n        }\n    },\n    actions: {\n        /**\n        * Call API to load Tweet and highlight\n        * @param {*} param0 \n        * @param {*} id \n        */\n        loadRawTweet({ commit }, id) {\n\n            //Make API call\n            Api.get(`twitter/tweet/${id}`)\n                .then(function (result) {\n\n                    commit('SAVE_RAW_TWEET', result.data)\n\n                    //Throw error if needed\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        /**\n         * Call API to load Tweet and highlight\n         * @param {*} param0 \n         * @param {*} id \n         */\n        async loadTweet({ commit, dispatch }, id) {\n\n            //Assign modified tweet to state\n            await Api.get(`twitter/tweet/${id}`)\n                .then(function (result) {\n                    commit('SAVE_TWEET', result.data);\n                    //Throw error if needed\n                }).then(function () {\n                    dispatch('loadWhois');\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n\n\n        },\n        async loadWhois({ commit, state }) {\n\n\n            var urls = state.tweet.entities.urls;\n            var whois = [];\n\n            //Performs whois on each hostname in Tweet\n            for (let i = 0; i < urls.length; i++) {\n\n                var url = urls[i].expanded_url;\n                var hostname;\n                //find & remove protocol (http, ftp, etc.) and get hostname\n\n                if (url.indexOf(\"//\") > -1) {\n                    hostname = url.split(\"/\")[2];\n                } else {\n                    hostname = url.split(\"/\")[0];\n                }\n\n                //find & remove port number\n                hostname = hostname.split(\":\")[0];\n                //find & remove \"?\"\n                hostname = hostname.split(\"?\")[0];\n\n                //Extract hostname\n                var extractedUrl = psl.get(hostname);\n\n                //Make API call\n                await Api.get(`whois/${extractedUrl}`)\n                    .then(function (result) {\n\n                        //Add result to array\n                        whois.push(result.data);\n                    })\n                    .catch(error => {\n                        throw new Error(\"API ERROR\");\n                    });\n            }\n\n            //Assign local variable\n            commit('SAVE_WHOIS', whois);\n        },\n        loadIsLoading({ commit },isLoading) {\n            if (isLoading) {\n                commit('SAVE_IS_LOADING', true);\n            } else {\n                commit('SAVE_IS_LOADING', false);\n            }\n        },\n        loadTwitterTrendsUK() {\n            var self = this;\n\n            Api.get(`twitter/trends/44418`)\n                .then(function (result) {\n                    self.commit('SAVE_TWITTER_TRENDS_UK', result.data);\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        loadTwitterTrendsUS() {\n            var self = this;\n\n            Api.get(`twitter/trends/2459115`)\n                .then(function (result) {\n                    self.commit('SAVE_TWITTER_TRENDS_US', result.data);\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        setTab({ commit }, tab) {\n            this.commit('SAVE_TAB', tab);\n        }\n    }\n});"]}]}