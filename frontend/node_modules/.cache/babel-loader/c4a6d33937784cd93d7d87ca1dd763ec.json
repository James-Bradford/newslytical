{"remainingRequest":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/babel-loader/lib/index.js!/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js","dependencies":[{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js","mtime":1594544867808},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgVnVleCBmcm9tICd2dWV4JzsKaW1wb3J0IEFwaSBmcm9tICcuLi9zZXJ2aWNlcy9BcGknOwpWdWUudXNlKFZ1ZXgpOwpleHBvcnQgY29uc3Qgc3RvcmUgPSBuZXcgVnVleC5TdG9yZSh7CiAgc3RhdGU6IHsKICAgIHJhd1R3ZWV0OiB7fSwKICAgIHR3ZWV0OiB7fSwKICAgIHR3aXR0ZXJUcmVuZHNVUzoge30sCiAgICB0d2l0dGVyVHJlbmRzVUs6IHt9LAogICAgd2hvaXM6IFtdLAogICAgdGFiOiBOdW1iZXIKICB9LAogIG11dGF0aW9uczogewogICAgU0FWRV9SQVdfVFdFRVQoc3RhdGUsIHJhd1R3ZWV0KSB7CiAgICAgIHN0YXRlLnJhd1R3ZWV0ID0gcmF3VHdlZXQ7CiAgICB9LAoKICAgIFNBVkVfVFdFRVQoc3RhdGUsIHR3ZWV0KSB7CiAgICAgIHN0YXRlLnR3ZWV0ID0gdHdlZXQ7CiAgICB9LAoKICAgIFNBVkVfVFdJVFRFUl9UUkVORFNfVVMoc3RhdGUsIHR3aXR0ZXJUcmVuZHMpIHsKICAgICAgc3RhdGUudHdpdHRlclRyZW5kc1VTID0gdHdpdHRlclRyZW5kczsKICAgIH0sCgogICAgU0FWRV9UV0lUVEVSX1RSRU5EU19VSyhzdGF0ZSwgdHdpdHRlclRyZW5kcykgewogICAgICBzdGF0ZS50d2l0dGVyVHJlbmRzVUsgPSB0d2l0dGVyVHJlbmRzOwogICAgfSwKCiAgICBTQVZFX1dIT0lTKHN0YXRlLCB3aG9pcykgewogICAgICBzdGF0ZS53aG9pcyA9IHdob2lzOwogICAgfSwKCiAgICBTQVZFX1RBQihzdGF0ZSwgdGFiKSB7CiAgICAgIHN0YXRlLnRhYiA9IHRhYjsKICAgIH0KCiAgfSwKICBhY3Rpb25zOiB7CiAgICAvKioKICAgICogQ2FsbCBBUEkgdG8gbG9hZCBUd2VldCBhbmQgaGlnaGxpZ2h0CiAgICAqIEBwYXJhbSB7Kn0gcGFyYW0wIAogICAgKiBAcGFyYW0geyp9IGlkIAogICAgKi8KICAgIGxvYWRSYXdUd2VldCh7CiAgICAgIGNvbW1pdCwKICAgICAgc3RhdGUKICAgIH0sIGlkKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsgLy9NYWtlIEFQSSBjYWxsCgogICAgICBBcGkuZ2V0KGB0d2l0dGVyLyR7aWR9YCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgc2VsZi5jb21taXQoJ1NBVkVfUkFXX1RXRUVUJywgcmVzdWx0LmRhdGEpOyAvL1Rocm93IGVycm9yIGlmIG5lZWRlZAogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJBUEkgRVJST1IiKTsKICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogQ2FsbCBBUEkgdG8gbG9hZCBUd2VldCBhbmQgaGlnaGxpZ2h0CiAgICAgKiAKICAgICAqIEBwYXJhbSB7Kn0gaWQgCiAgICAgKi8KICAgIGxvYWRUd2VldChpZCkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7IC8vTWFrZSBBUEkgY2FsbAoKICAgICAgQXBpLmdldChgdHdpdHRlci90d2VldC8ke2lkfWApLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIC8vU2V0IHZhcmlhYmxlcwogICAgICAgIHZhciB0d2VldCA9IHJlc3VsdC5kYXRhOwogICAgICAgIGNvbnN0IHVybHMgPSB0d2VldC5lbnRpdGllcy51cmxzOwogICAgICAgIGNvbnN0IGhhc2h0YWdzID0gdHdlZXQuZW50aXRpZXMuaGFzaHRhZ3M7IC8vRm9yIGVhY2ggVVJMLCByZXBsYWNlIGl0IHdpdGggaGlnaGxpZ2h0ZWQgdmVyc2lvbgoKICAgICAgICBmb3IgKGxldCBpIGluIHVybHMpIHsKICAgICAgICAgIHR3ZWV0LmZ1bGxfdGV4dCA9IHR3ZWV0LmZ1bGxfdGV4dC5yZXBsYWNlKHVybHNbaV0udXJsLCBgPHNwYW4gY2xhc3M9ImhpZ2hsaWdodFVSTCI+JHt1cmxzW2ldLmV4cGFuZGVkX3VybH08L3NwYW4+YCk7CiAgICAgICAgfSAvL0ZvciBlYWNoIGhhc2h0YWcsIHJlcGxhY2UgaXQgd2l0aCBoaWdobGlnaHRlZCB2ZXJzaW9uCgoKICAgICAgICBmb3IgKGxldCBpIGluIGhhc2h0YWdzKSB7CiAgICAgICAgICB0d2VldC5mdWxsX3RleHQgPSB0d2VldC5mdWxsX3RleHQucmVwbGFjZSgiIyIgKyBoYXNodGFnc1tpXS50ZXh0LCBgPHNwYW4gY2xhc3M9ImhpZ2hsaWdodEhhc2h0YWciPiMke2hhc2h0YWdzW2ldLnRleHR9PC9zcGFuPmApOwogICAgICAgIH0gLy9Bc3NpZ24gbW9kaWZpZWQgdHdlZXQgdG8gc3RhdGUKCgogICAgICAgIHNlbGYuY29tbWl0KCdTQVZFX1RXRUVUJywgdHdlZXQpOyAvL1Rocm93IGVycm9yIGlmIG5lZWRlZAogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJBUEkgRVJST1IiKTsKICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogQ2FsbCBBUEkgdG8gZ2V0IFRyZW5kcyBmb3IgVVMgYW5kIFVLCiAgICAgKi8KICAgIGxvYWRUd2l0dGVyVHJlbmRzKCkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7IC8vIFVTIFRyZW5kcwoKICAgICAgQXBpLmdldChgdHdpdHRlci90cmVuZHMvMjQ1OTExNWApLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIHNlbGYuY29tbWl0KCdTQVZFX1RXSVRURVJfVFJFTkRTX1VTJyk7CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFQSSBFUlJPUiIpOwogICAgICB9KTsgLy8gVUsgVHJlbmRzCgogICAgICBBcGkuZ2V0KGB0d2l0dGVyL3RyZW5kcy80NDQxOGApLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIHNlbGYuY29tbWl0KCdTQVZFX1RXSVRURVJfVEVORFNfVUsnKTsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IG5ldyBFcnJvcigiQVBJIEVSUk9SIik7CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIFNldHMgdGhlIHRhYiB0byBhIHNwZWNpZmljIHZhbHVlCiAgICAgKiBAcGFyYW0geyp9IHRhYiAKICAgICAqLwogICAgc2V0VGFiKHRhYikgewogICAgICB0aGlzLmNvbW1pdCgnU0FWRV9UQUInLCB0YWIpOwogICAgfQoKICB9Cn0pOw=="},{"version":3,"sources":["/Users/jamesbradford/Documents/Dissertation Repository/Repos/Combined/frontend/src/store/store.js"],"names":["Vue","Vuex","Api","use","store","Store","state","rawTweet","tweet","twitterTrendsUS","twitterTrendsUK","whois","tab","Number","mutations","SAVE_RAW_TWEET","SAVE_TWEET","SAVE_TWITTER_TRENDS_US","twitterTrends","SAVE_TWITTER_TRENDS_UK","SAVE_WHOIS","SAVE_TAB","actions","loadRawTweet","commit","id","self","get","then","result","data","catch","error","Error","loadTweet","urls","entities","hashtags","i","full_text","replace","url","expanded_url","text","loadTwitterTrends","setTab"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport Api from '../services/Api'\n\nVue.use(Vuex)\n\nexport const store = new Vuex.Store({\n    state: {\n        rawTweet: {},\n        tweet: {},\n        twitterTrendsUS: {},\n        twitterTrendsUK: {},\n        whois: [],\n        tab: Number\n    },\n    mutations: {\n        SAVE_RAW_TWEET(state, rawTweet) {\n            state.rawTweet = rawTweet;\n        },\n        SAVE_TWEET(state, tweet) {\n            state.tweet = tweet;\n        },\n        SAVE_TWITTER_TRENDS_US(state, twitterTrends) {\n            state.twitterTrendsUS = twitterTrends;\n        },\n        SAVE_TWITTER_TRENDS_UK(state, twitterTrends) {\n            state.twitterTrendsUK = twitterTrends;\n        },\n        SAVE_WHOIS(state, whois) {\n            state.whois = whois;\n        },\n        SAVE_TAB(state, tab) {\n            state.tab = tab;\n        }\n    },\n    actions: {\n        /**\n        * Call API to load Tweet and highlight\n        * @param {*} param0 \n        * @param {*} id \n        */\n        loadRawTweet({ commit, state }, id) {\n            var self = this;\n\n            //Make API call\n            Api.get(`twitter/${id}`)\n                .then(function (result) {\n\n                    self.commit('SAVE_RAW_TWEET', result.data)\n\n                    //Throw error if needed\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        /**\n         * Call API to load Tweet and highlight\n         * \n         * @param {*} id \n         */\n        loadTweet(id) {\n            var self = this;\n\n            //Make API call\n            Api.get(`twitter/tweet/${id}`)\n                .then(function (result) {\n                    //Set variables\n                    var tweet = result.data;\n                    const urls = tweet.entities.urls;\n                    const hashtags = tweet.entities.hashtags;\n\n                    //For each URL, replace it with highlighted version\n                    for (let i in urls) {\n                        tweet.full_text = tweet.full_text.replace(urls[i].url, `<span class=\"highlightURL\">${urls[i].expanded_url}</span>`);\n                    }\n\n                    //For each hashtag, replace it with highlighted version\n                    for (let i in hashtags) {\n                        tweet.full_text = tweet.full_text.replace(\"#\" + hashtags[i].text, `<span class=\"highlightHashtag\">#${hashtags[i].text}</span>`)\n                    }\n\n                    //Assign modified tweet to state\n                    self.commit('SAVE_TWEET', tweet)\n\n                    //Throw error if needed\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        /**\n         * Call API to get Trends for US and UK\n         */\n        loadTwitterTrends() {\n            var self = this;\n\n            // US Trends\n            Api.get(`twitter/trends/2459115`)\n                .then(function (result) {\n                    self.commit('SAVE_TWITTER_TRENDS_US')\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n\n            // UK Trends\n            Api.get(`twitter/trends/44418`)\n                .then(function (result) {\n                    self.commit('SAVE_TWITTER_TENDS_UK')\n                }).catch(error => {\n                    throw new Error(\"API ERROR\");\n                });\n        },\n        /**\n         * Sets the tab to a specific value\n         * @param {*} tab \n         */\n        setTab(tab) {\n            this.commit('SAVE_TAB', tab);\n        }\n    }\n});"]}]}